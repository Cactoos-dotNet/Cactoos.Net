using Cactoos.Text;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Cactoos.Reflection
{
    /// <summary>
    /// Gets types, which are not generated by the compiler or useless.
    /// </summary>
    public class UsefulTypes : IEnumerable<Type>
    {
        private IEnumerable<Type> _source;

        public UsefulTypes(IScalar<System.Reflection.Assembly> assembly) : this(new AssemblyTypes(assembly))
        {

        }

        public UsefulTypes(System.Reflection.Assembly assembly) : this(new AssemblyTypes(assembly))
        {

        }

        public UsefulTypes(IEnumerable<Type> source)
        {
            _source = source;
        }

        public IEnumerator<Type> GetEnumerator()
        {
            // Ignore useless types
            return _source.Where(type =>
                         type.IsPublic &&
                       !(type.Name.Contains("<PrivateImplementationDetails>") ||
                       type.Name.Contains('+') ||
                       type.Name.Contains('>') ||
                       type.Name.Contains('<') || // C# compiler generated classes 
                       type.Name.Contains('_') ||
                       type.Name.Contains('.') || // System.Runtime.CompilerServices.*
                       new IsUpper(type.Name).Value() ||
                       type.Name.Contains("Interop+") || // System.IO.FileSystem, System.Net.Sockets, etc
                       type.Name.Contains("ProcessedByFody") ||
                       type.Name.Contains("FXAssembly") ||
                       type.Name.Contains("ThisAssembly") ||
                       type.Name.Contains("AssemblyRef") ||
                       type.Name.Contains("MS.Internal") ||
                       type.Name.Contains("::") ||
                       type.Name.Contains("\\*") ||
                       type.Name.Contains("_extraBytes_") ||
                       type.Name.Contains("CppImplementationDetails"))
                  ).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
